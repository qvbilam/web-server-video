// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: drama.proto

package videoV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DramaClient is the client API for Drama service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DramaClient interface {
	Create(ctx context.Context, in *UpdateDramaRequest, opts ...grpc.CallOption) (*DramaResponse, error)
	Update(ctx context.Context, in *UpdateDramaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *UpdateDramaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDetail(ctx context.Context, in *SearchDramaRequest, opts ...grpc.CallOption) (*DramaResponse, error)
	Get(ctx context.Context, in *SearchDramaRequest, opts ...grpc.CallOption) (*DramaListResponse, error)
}

type dramaClient struct {
	cc grpc.ClientConnInterface
}

func NewDramaClient(cc grpc.ClientConnInterface) DramaClient {
	return &dramaClient{cc}
}

func (c *dramaClient) Create(ctx context.Context, in *UpdateDramaRequest, opts ...grpc.CallOption) (*DramaResponse, error) {
	out := new(DramaResponse)
	err := c.cc.Invoke(ctx, "/video.pb.Drama/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) Update(ctx context.Context, in *UpdateDramaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/video.pb.Drama/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) Delete(ctx context.Context, in *UpdateDramaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/video.pb.Drama/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) GetDetail(ctx context.Context, in *SearchDramaRequest, opts ...grpc.CallOption) (*DramaResponse, error) {
	out := new(DramaResponse)
	err := c.cc.Invoke(ctx, "/video.pb.Drama/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) Get(ctx context.Context, in *SearchDramaRequest, opts ...grpc.CallOption) (*DramaListResponse, error) {
	out := new(DramaListResponse)
	err := c.cc.Invoke(ctx, "/video.pb.Drama/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DramaServer is the server API for Drama service.
// All implementations must embed UnimplementedDramaServer
// for forward compatibility
type DramaServer interface {
	Create(context.Context, *UpdateDramaRequest) (*DramaResponse, error)
	Update(context.Context, *UpdateDramaRequest) (*emptypb.Empty, error)
	Delete(context.Context, *UpdateDramaRequest) (*emptypb.Empty, error)
	GetDetail(context.Context, *SearchDramaRequest) (*DramaResponse, error)
	Get(context.Context, *SearchDramaRequest) (*DramaListResponse, error)
	mustEmbedUnimplementedDramaServer()
}

// UnimplementedDramaServer must be embedded to have forward compatible implementations.
type UnimplementedDramaServer struct {
}

func (UnimplementedDramaServer) Create(context.Context, *UpdateDramaRequest) (*DramaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDramaServer) Update(context.Context, *UpdateDramaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDramaServer) Delete(context.Context, *UpdateDramaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDramaServer) GetDetail(context.Context, *SearchDramaRequest) (*DramaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedDramaServer) Get(context.Context, *SearchDramaRequest) (*DramaListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDramaServer) mustEmbedUnimplementedDramaServer() {}

// UnsafeDramaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DramaServer will
// result in compilation errors.
type UnsafeDramaServer interface {
	mustEmbedUnimplementedDramaServer()
}

func RegisterDramaServer(s grpc.ServiceRegistrar, srv DramaServer) {
	s.RegisterService(&Drama_ServiceDesc, srv)
}

func _Drama_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.pb.Drama/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).Create(ctx, req.(*UpdateDramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.pb.Drama/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).Update(ctx, req.(*UpdateDramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.pb.Drama/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).Delete(ctx, req.(*UpdateDramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.pb.Drama/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).GetDetail(ctx, req.(*SearchDramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.pb.Drama/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).Get(ctx, req.(*SearchDramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drama_ServiceDesc is the grpc.ServiceDesc for Drama service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drama_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.pb.Drama",
	HandlerType: (*DramaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Drama_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Drama_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Drama_Delete_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _Drama_GetDetail_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Drama_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drama.proto",
}
